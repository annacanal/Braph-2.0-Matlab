classdef RandomComparisonfMRI < RandomComparison
    properties
        value_group  % array with the value_1 of the measure for each subject of group 1
        value_random  % array with the value_1 of the measure for each subject of group 1
        average_value_group  % average value of group 1
        average_value_random  % average value of group 1
        difference  % difference
        all_differences  % all differences obtained through the permutation test
        p1  % p value single tailed
        p2  % p value double tailed
        confidence_interval_min  % min value of the 95% confidence interval
        confidence_interval_max  % max value of the 95% confidence interval
    end
    methods  % Constructor
        function rc =  RandomComparisonfMRI(id, label, notes, atlas, measure_code, group, varargin)

            graph_type = AnalysisfMRI.getGraphType();
            measure_list = Graph.getCompatibleMeasureList(graph_type);
            
            assert(ismember(measure_code, measure_list), ...
                 [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2.BUG_FUNC], ...
                 'RandomComparisonfMRI measure_code is not compatible with the permited Measures.');

            c = c@RandomComparison(id, label, notes, atlas, measure_code, group, varargin{:});
        end
    end
    methods  % Get functions
        function value = getGroupValue(rc)
            value = rc.value_group;
        end
        function value = getRandomValue(rc)
            value = rc.value_random;
        end
        function average_value_group = getGroupAverageValue(rc)
            average_value_group = rc.average_value_group;
        end
        function average_value_random = getRandomAverageValue(rc)
            average_value_random = rc.average_value_random;          
        end
        function difference = getDifference(rc)
            difference = rc.difference;
        end
        function all_differences = getAllDifferences(rc)
            all_differences = rc.all_differences;
        end
        function p1 = getP1(rc)
            p1 = rc.p1;
        end
        function p2 = getP2(rc)
            p2 = rc.p2;
        end
        function confidence_interval_min = getConfidenceIntervalMin(rc)
            confidence_interval_min = rc.confidence_interval_min;
        end
        function confidence_interval_max = getConfidenceIntervalMax(rc)
            confidence_interval_max = rc.confidence_interval_max;
        end
    end
    methods (Access=protected)  % Initialize data
        function initialize_data(rc, varargin)
             atlases = rc.getBrainAtlases();
            atlas = atlases{1};
            group = rc.getGroup();
            
            measure_code = rc.getMeasureCode();
            
            number_of_permutations = rc.getSettings('RandomComparisonfMRI.PermutationNumber');
            
            if Measure.is_global(measure_code)  % global measure
                % values
                rc.value_1 = get_from_varargin( ...
                    repmat({0}, 1, group.subjectnumber()), ...
                    'RandomComparisonfMRI.value_1', ...
                    varargin{:});
                assert(iscell(rc.getGroupValue()) & ...
                    isequal(size(rc.getGroupValue()), [1, group.subjectnumber()]) & ...
                    all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getGroupValue())), ...
                    ['BRAPH:RandomComparisonfMRI:WrongData'], ...
                    ['Data not compatible with RandomComparisonfMRI.'])
                
                rc.value_random = get_from_varargin( ...
                    repmat({0}, 1, group.subjectnumber()), ...
                    'RandomComparisonfMRI.value_random', ...
                    varargin{:});
                assert(iscell(rc.getRandomValue()) & ...
                    isequal(size(rc.getRandomValue()), [1, group.subjectnumber()]) & ...
                    all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getRandomValue())), ...
                    ['BRAPH:RandomComparisonfMRI:WrongData'], ...
                    ['Data not compatible with RandomComparisonfMRI.'])
                
                % average values
                rc.average_value_group = get_from_varargin( ...
                    {0}, ...
                    'RandomComparisonfMRI.average_value_group', ...
                    varargin{:});
                assert(iscell(rc.getGroupAverageValue()) && ...
                    isequal(size(rc.getGroupAverageValue()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getGroupAverageValue())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2.WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.average_value_random = get_from_varargin( ...
                    {0}, ...
                    'RandomComparisonfMRI.average_value_random', ...
                    varargin{:});
                assert(iscell(rc.getRandomAverageValue()) && ...
                    isequal(size(rc.getRandomAverageValue()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getRandomAverageValue())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2.WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                % statistic measures
                rc.difference = get_from_varargin( ...
                    {0}, ...
                    'RandomComparisonfMRI.difference', ...
                    varargin{:});
                assert(iscell(rc.getDifference()) && ...
                    isequal(size(rc.getDifference()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getDifference())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.all_differences = get_from_varargin( ...
                    repmat({0}, 1, number_of_permutations), ...
                    'RandomComparisonfMRI.all_differences', ...
                    varargin{:});
                assert(iscell(rc.getAllDifferences()) && ...
                    isequal(size(rc.getAllDifferences()), [1, number_of_permutations]) && ...
                    all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getAllDifferences())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.p1 = get_from_varargin( ...
                    {0}, ...
                    'RandomComparisonfMRI.p1', ...
                    varargin{:});
                assert(iscell(rc.getP1()) && ...
                    isequal(size(rc.getP1()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getP1())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.p2 = get_from_varargin( ...
                    {0}, ...
                    'RandomComparisonfMRI.p2', ...
                    varargin{:});
                assert(iscell(rc.getP2()) && ...
                    isequal(size(rc.getP2()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getP2())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.confidence_interval_min = get_from_varargin( ...
                    {0}, ...
                    'RandomComparisonfMRI.confidence_min', ...
                    varargin{:});
                assert(iscell(rc.getConfidenceIntervalMin()) && ...
                    isequal(size(rc.getConfidenceIntervalMin()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getConfidenceIntervalMin())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.confidence_interval_max = get_from_varargin( ...
                    {0}, ...
                    'RandomComparisonfMRI.confidence_max', ...
                    varargin{:});
                assert(iscell(rc.getConfidenceIntervalMax()) && ...
                    isequal(size(rc.getConfidenceIntervalMax()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getConfidenceIntervalMax())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
            elseif Measure.is_nodal(measure_code)  % nodal measure
                rc.value_1 = get_from_varargin( ...
                    repmat({zeros(atlas.getBrainRegions().length(), 1)}, 1, group.subjectnumber()), ...
                    'RandomComparisonfMRI.value_1', ...
                    varargin{:});
                assert(iscell(rc.getGroupValue()) & ...
                    isequal(size(rc.getGroupValue()), [1, group.subjectnumber()]) & ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getGroupValue())), ...
                    ['BRAPH:RandomComparisonfMRI:WrongData'], ...
                    ['Data not compatible with RandomComparisonfMRI.'])
                
                rc.value_random = get_from_varargin( ...
                    repmat({zeros(atlas.getBrainRegions().length(), 1)}, 1, group.subjectnumber()), ...
                    'RandomComparisonfMRI.value_random', ...
                    varargin{:});
                assert(iscell(rc.getRandomValue()) & ...
                    isequal(size(rc.getRandomValue()), [1, group.subjectnumber()]) & ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getRandomValue())), ...
                    ['BRAPH:RandomComparisonfMRI:WrongData'], ...
                    ['Data not compatible with RandomComparisonfMRI.'])
                
                rc.average_value_group = get_from_varargin( ...
                    {zeros(atlas.getBrainRegions().length(), 1)}, ...
                    'RandomComparisonfMRI.average_value_group', ...
                    varargin{:});
                assert(iscell(rc.getGroupAverageValue()) && ...
                    isequal(size(rc.getGroupAverageValue()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getGroupAverageValue())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.average_value_random = get_from_varargin( ...
                    {zeros(atlas.getBrainRegions().length(), 1)}, ...
                    'RandomComparisonfMRI.average_value_random', ...
                    varargin{:});
                assert(iscell(rc.getRandomAverageValue()) && ...
                    isequal(size(rc.getRandomAverageValue()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getRandomAverageValue())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                % statistic values
                rc.difference = get_from_varargin( ...
                    {zeros(atlas.getBrainRegions().length(), 1)}, ...
                    'RandomComparisonfMRI.difference', ...
                    varargin{:});
                assert(iscell(rc.getDifference()) && ...
                    isequal(size(rc.getDifference()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getDifference())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.all_differences = get_from_varargin( ...
                    repmat({zeros(atlas.getBrainRegions().length(), 1)}, 1, number_of_permutations), ...
                    'RandomComparisonfMRI.all_differences', ...
                    varargin{:});
                assert(iscell(rc.getAllDifferences()) && ...
                    isequal(size(rc.getAllDifferences()), [1, number_of_permutations]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getAllDifferences())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.p1 = get_from_varargin( ...
                    {zeros(atlas.getBrainRegions().length(), 1)}, ...
                    'RandomComparisonfMRI.p1', ...
                    varargin{:});
                assert(iscell(rc.getP1()) && ...
                    isequal(size(rc.getP1()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getP1())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.p2 = get_from_varargin( ...
                    {zeros(atlas.getBrainRegions().length(), 1)}, ...
                    'RandomComparisonfMRI.p2', ...
                    varargin{:});
                assert(iscell(rc.getP2()) && ...
                    isequal(size(rc.getP2()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getP2())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.confidence_interval_min = get_from_varargin( ...
                    {zeros(atlas.getBrainRegions().length(), 1)}, ...
                    'RandomComparisonfMRI.confidence_min', ...
                    varargin{:});
                assert(iscell(rc.getConfidenceIntervalMin()) && ...
                    isequal(size(rc.getConfidenceIntervalMin()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getConfidenceIntervalMin())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.confidence_interval_max = get_from_varargin( ...
                    {zeros(atlas.getBrainRegions().length(), 1)}, ...
                    'RandomComparisonfMRI.confidence_max', ...
                    varargin{:});
                assert(iscell(rc.getConfidenceIntervalMax()) && ...
                    isequal(size(rc.getConfidenceIntervalMax()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getConfidenceIntervalMax())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
            elseif Measure.is_binodal(measure_code)  % binodal measure
                rc.value_1 = get_from_varargin( ...
                    repmat({zeros(atlas.getBrainRegions().length())}, 1, group.subjectnumber()), ...
                    'RandomComparisonfMRI.value_1', ...
                    varargin{:});
                assert(iscell(rc.getGroupValue()) & ...
                    isequal(size(rc.getGroupValue()), [1, group.subjectnumber()]) & ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getGroupValue())), ...
                    ['BRAPH:RandomComparisonfMRI:WrongData'], ...
                    ['Data not compatible with RandomComparisonfMRI.']) %#ok<*NBRAK>
                
                rc.value_random = get_from_varargin( ...
                    repmat({zeros(atlas.getBrainRegions().length())}, 1, group.subjectnumber()), ...
                    'RandomComparisonfMRI.value_random', ...
                    varargin{:});
                assert(iscell(rc.getRandomValue()) & ...
                    isequal(size(rc.getRandomValue()), [1, group.subjectnumber()]) & ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getRandomValue())), ...
                    ['BRAPH:RandomComparisonfMRI:WrongData'], ...
                    ['Data not compatible with RandomComparisonfMRI.'])
                
                rc.average_value_group = get_from_varargin( ...
                    {zeros(atlas.getBrainRegions().length())}, ...
                    'RandomComparisonfMRI.average_value_group', ...
                    varargin{:});
                assert(iscell(rc.getGroupAverageValue()) && ...
                    isequal(size(rc.getGroupAverageValue()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getGroupAverageValue())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.average_value_random = get_from_varargin( ...
                    {zeros(atlas.getBrainRegions().length())}, ...
                    'RandomComparisonfMRI.average_value_random', ...
                    varargin{:});
                assert(iscell(rc.getRandomAverageValue()) && ...
                    isequal(size(rc.getRandomAverageValue()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getRandomAverageValue())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                
                % statistic values
                rc.difference = get_from_varargin( ...
                    {zeros(atlas.getBrainRegions().length())}, ...
                    'RandomComparisonfMRI.difference', ...
                    varargin{:});
                assert(iscell(rc.getDifference()) && ...
                    isequal(size(rc.getDifference()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getDifference())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.all_differences = get_from_varargin( ...
                    repmat({zeros(atlas.getBrainRegions().length())}, 1, number_of_permutations), ...
                    'RandomComparisonfMRI.all_differences', ...
                    varargin{:});
                assert(iscell(rc.getAllDifferences()) && ...
                    isequal(size(rc.getAllDifferences()), [1, number_of_permutations]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getAllDifferences())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.p1 = get_from_varargin( ...
                    {zeros(atlas.getBrainRegions().length())}, ...
                    'RandomComparisonfMRI.p1', ...
                    varargin{:});
                assert(iscell(rc.getP1()) && ...
                    isequal(size(rc.getP1()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getP1())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.p2 = get_from_varargin( ...
                    {zeros(atlas.getBrainRegions().length())}, ...
                    'RandomComparisonfMRI.p2', ...
                    varargin{:});
                assert(iscell(rc.getP2()) && ...
                    isequal(size(rc.getP2()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getP2())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.confidence_interval_min = get_from_varargin( ...
                    {zeros(atlas.getBrainRegions().length())}, ...
                    'RandomComparisonfMRI.confidence_min', ...
                    varargin{:});
                assert(iscell(rc.getConfidenceIntervalMin()) && ...
                    isequal(size(rc.getConfidenceIntervalMin()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getConfidenceIntervalMin())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
                
                rc.confidence_interval_max = get_from_varargin( ...
                    {zeros(atlas.getBrainRegions().length())}, ...
                    'RandomComparisonfMRI.confidence_max', ...
                    varargin{:});
                assert(iscell(rc.getConfidenceIntervalMax()) && ...
                    isequal(size(rc.getConfidenceIntervalMax()), [1, 1]) && ...
                    all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getConfidenceIntervalMax())), ...
                    [BRAPH2.STR ':RandomComparisonfMRI:' BRAPH2. WRONG_INPUT], ...
                    'Data not compatible with RandomComparisonfMRI')
            end
        end
    end
    methods (Static)  % Descriptive functions
        function class = getClass()
            class = 'RandomComparisonfMRI';
        end
        function name = getName()
            name = 'Random Comparison Functional MRI';
        end
        function description = getDescription()
            description = 'fMRI random comparison.';
        end
        function atlas_number = getBrainAtlasNumber()
            atlas_number =  1;
        end
        function analysis_class = getAnalysisClass()
            analysis_class = 'AnalysisfMRI';
        end
        function subject_class = getSubjectClass()
            subject_class = 'SubjectfMRI';
        end
        function available_settings = getAvailableSettings()
            available_settings = {
                'RandomComparisonfMRI.PermutationNumber', BRAPH2.NUMERIC, 1000, {};
                };
        end
        function sub = getComparison(comparisonClass, id, label, notes, atlas, measure_code, group_1, group_2, varargin) %#ok<INUSD>
            sub = eval([comparisonClass '(id, label, notes, atlas, mesure_code, group_1, group_2, varargin{:})']);
        end
    end
end