classdef RandomComparisonfMRI_WU < RandomComparison
    properties
        value_group  % array with the value_group of the measure for each subject of group 1
        value_random  % array with the value_group of the measure for each subject of group 1
        difference  % difference
        all_differences  % all differences obtained through the permutation test
        p1  % p value single tailed
        p2  % p value double tailed
        confidence_interval_min  % min value of the 95% confidence interval
        confidence_interval_max  % max value of the 95% confidence interval
    end
    methods  % Constructor
        function rc =  RandomComparisonfMRI_WU(id, label, notes, atlas, measure_code, group, varargin)
            
            % TODO: Add assert that the measure_code is in the measure list.
            
            rc = rc@RandomComparison(id, label, notes, atlas, measure_code, group, varargin{:});
        end
    end
      methods  % Basic function
        function disp(rc)
            % DISP overrides RandomComparison disp
            %
            % DISP(M) overrides RandomComparison disp and displays additional
            % information about the difference of the RandomComparisonfMRI_WU.
            % 
            % See also Comparison
            
            rc.disp@RandomComparison()
            disp(['value group (' tostring(size(rc.value_group{1}, 1)) 'x' tostring(size(rc.value_group{1}, 2)) ') = {' tostring(rc.value_group{1}) '}' ])
            disp(['value random (' tostring(size(rc.value_random{1}, 1)) 'x' tostring(size(rc.value_random{1}, 2)) ') = {' tostring(rc.value_random{1}) '}' ])
            disp(['difference (' tostring(size(rc.difference{1}, 1)) 'x' tostring(size(rc.difference{1}, 2)) ') = {' tostring(rc.difference{1}) '}' ])
            disp(['p1 (' tostring(size(rc.p1{1}, 1)) 'x' tostring(size(rc.p1{1}, 2)) ') = {' tostring(rc.p1{1}) '}' ])
            disp(['p2 (' tostring(size(rc.p2{1}, 1)) 'x' tostring(size(rc.p2{1}, 2)) ') = {' tostring(rc.p2{1}) '}' ])
            disp(['confidence interval min (' tostring(size(rc.confidence_interval_min{1}, 1)) 'x' tostring(size(rc.confidence_interval_min{1}, 2)) ') = {' tostring(rc.confidence_interval_min{1}) '}' ])
            disp(['confidence interval max (' tostring(size(rc.confidence_interval_max{1}, 1)) 'x' tostring(size(rc.confidence_interval_max{1}, 2)) ') = {' tostring(rc.confidence_interval_max{1}) '}' ])
        end
    end
    methods  % Get functions
        function value = getGroupValue(rc)
            value = rc.value_group;
        end
        function random_value = getRandomValue(rc)
            random_value = rc.value_random;
        end
        function difference = getDifference(rc)
            difference = rc.difference;
        end
        function all_differences = getAllDifferences(rc)
            all_differences = rc.all_differences;
        end
        function p1 = getP1(rc)
            p1 = rc.p1;
        end
        function p2 = getP2(rc)
            p2 = rc.p2;
        end
        function confidence_interval_min = getConfidenceIntervalMin(rc)
            confidence_interval_min = rc.confidence_interval_min;
        end
        function confidence_interval_max = getConfidenceIntervalMax(rc)
            confidence_interval_max = rc.confidence_interval_max;
        end
    end
    methods (Access=protected)  % Initialize data
        function initialize_data(rc, varargin)
            atlases = rc.getBrainAtlases();
            atlas = atlases{1};
            
            measure_code = rc.getMeasureCode();
            
            number_of_randomizations = rc.getSettings('RandomComparisonfMRI_WU.RandomizationNumber');
            
            if Measure.is_global(measure_code)  % global measure
%                 rc.value_group = get_from_varargin( ...
%                     {0}, ...
%                     'RandomComparisonfMRI_WU.value_group', ...
%                     varargin{:});
%                 assert(iscell(rc.getGroupValue()) && ...
%                     isequal(size(rc.getGroupValue()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getGroupValue())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
%                 
%                 rc.value_random = get_from_varargin( ...
%                     {0}, ...
%                     'RandomComparisonfMRI_WU.value_random', ...
%                     varargin{:});
%                 assert(iscell(rc.getRandomValue()) && ...
%                     isequal(size(rc.getRandomValue()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getRandomValue())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
%                 
%                 rc.difference = get_from_varargin( ...
%                     {0}, ...
%                     'RandomComparisonfMRI_WU.difference', ...
%                     varargin{:});
%                 assert(iscell(rc.getDifference()) && ...
%                     isequal(size(rc.getDifference()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getDifference())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
%                 
%                 rc.all_differences = get_from_varargin( ...
%                     repmat({0}, 1, number_of_randomizations), ...
%                     'RandomComparisonfMRI_WU.all_differences', ...
%                     varargin{:});
%                 assert(iscell(rc.getAllDifferences()) && ...
%                     isequal(size(rc.getAllDifferences()), [1, number_of_randomizations]) && ...
%                     all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getAllDifferences())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
%                 
%                 rc.p1 = get_from_varargin( ...
%                     {0}, ...
%                     'RandomComparisonfMRI_WU.p1', ...
%                     varargin{:});
%                 assert(iscell(rc.getP1()) && ...
%                     isequal(size(rc.getP1()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getP1())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
%                 
%                 rc.p2 = get_from_varargin( ...
%                     {0}, ...
%                     'RandomComparisonfMRI_WU.p2', ...
%                     varargin{:});
%                 assert(iscell(rc.getP2()) && ...
%                     isequal(size(rc.getP2()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getP2())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
%                 
%                 rc.confidence_interval_min = get_from_varargin( ...
%                     {0}, ...
%                     'RandomComparisonfMRI_WU.confidence_min', ...
%                     varargin{:});
%                 assert(iscell(rc.getConfidenceIntervalMin()) && ...
%                     isequal(size(rc.getConfidenceIntervalMin()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getConfidenceIntervalMin())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
%                 
%                 rc.confidence_interval_max = get_from_varargin( ...
%                     {0}, ...
%                     'RandomComparisonfMRI_WU.confidence_max', ...
%                     varargin{:});
%                 assert(iscell(rc.getConfidenceIntervalMax()) && ...
%                     isequal(size(rc.getConfidenceIntervalMin()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [1, 1]), rc.getConfidenceIntervalMax())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
                
            elseif Measure.is_nodal(measure_code)  % nodal measure
%                 rc.value_group = get_from_varargin( ...
%                     {zeros(atlas.getBrainRegions().length(), 1)}, ...
%                     'RandomComparisonfMRI_WU.value_group', ...
%                     varargin{:});
%                 assert(iscell(rc.getGroupValue()) && ...
%                     isequal(size(rc.getGroupValue()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getGroupValue())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
%                 
%                 rc.value_random = get_from_varargin( ...
%                     {zeros(atlas.getBrainRegions().length(), 1)}, ...
%                     'RandomComparisonfMRI_WU.value_random', ...
%                     varargin{:});
%                 assert(iscell(rc.getRandomValue()) && ...
%                     isequal(size(rc.getRandomValue()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getRandomValue())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
%                 
%                 rc.difference = get_from_varargin( ...
%                     {zeros(atlas.getBrainRegions().length(), 1)}, ...
%                     'RandomComparisonfMRI_WU.difference', ...
%                     varargin{:});
%                 assert(iscell(rc.getDifference()) && ...
%                     isequal(size(rc.getDifference()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getDifference())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
%                 
%                 rc.all_differences = get_from_varargin( ...
%                     repmat({zeros(atlas.getBrainRegions().length(), 1)}, 1, number_of_randomizations), ...
%                     'RandomComparisonfMRI_WU.all_differences', ...
%                     varargin{:});
% 
%                 assert(iscell(rc.getAllDifferences()) && ...
%                     isequal(size(rc.getAllDifferences()), [1, number_of_randomizations]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getAllDifferences())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
% 
%                 rc.p1 = get_from_varargin( ...
%                     {zeros(atlas.getBrainRegions().length(), 1)}, ...
%                     'RandomComparisonfMRI_WU.p1', ...
%                     varargin{:});
%                 assert(iscell(rc.getP1()) && ...
%                     isequal(size(rc.getP1()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getP1())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
% 
%                 rc.p2 = get_from_varargin( ...
%                     {zeros(atlas.getBrainRegions().length(), 1)}, ...
%                     'RandomComparisonfMRI_WU.p2', ...
%                     varargin{:});
%                 assert(iscell(rc.getP2()) && ...
%                     isequal(size(rc.getP2()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getP2())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
% 
%                 rc.confidence_interval_min = get_from_varargin( ...
%                     {zeros(atlas.getBrainRegions().length(), 1)}, ...
%                     'RandomComparisonfMRI_WU.confidence_min', ...
%                     varargin{:});
%                 assert(iscell(rc.getConfidenceIntervalMin()) && ...
%                     isequal(size(rc.getConfidenceIntervalMin()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getConfidenceIntervalMin())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
% 
%                 rc.confidence_interval_max = get_from_varargin( ...
%                     {zeros(atlas.getBrainRegions().length(), 1)}, ...
%                     'RandomComparisonfMRI_WU.confidence_max', ...
%                     varargin{:});
%                 assert(iscell(rc.getConfidenceIntervalMax()) && ...
%                     isequal(size(rc.getConfidenceIntervalMax()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), 1]), rc.getConfidenceIntervalMax())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
                
            elseif Measure.is_binodal(measure_code)  % binodal measure
%                 rc.value_group = get_from_varargin( ...
%                     {zeros(atlas.getBrainRegions().length())}, ...
%                     'RandomComparisonfMRI_WU.value_group', ...
%                     varargin{:});
%                 assert(iscell(rc.getGroupValue()) && ...
%                     isequal(size(rc.getGroupValue()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getGroupValue())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
% 
%                 rc.value_random = get_from_varargin( ...
%                     {zeros(atlas.getBrainRegions().length())}, ...
%                     'RandomComparisonfMRI_WU.value_random', ...
%                     varargin{:});
%                 assert(iscell(rc.getRandomValue()) && ...
%                     isequal(size(rc.getRandomValue()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getRandomValue())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
%                 
%                 rc.difference = get_from_varargin( ...
%                     {zeros(atlas.getBrainRegions().length())}, ...
%                     'RandomComparisonfMRI_WU.difference', ...
%                     varargin{:});
%                 assert(iscell(rc.getDifference()) && ...
%                     isequal(size(rc.getDifference()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getDifference())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
% 
%                 rc.all_differences = get_from_varargin( ...
%                     repmat({zeros(atlas.getBrainRegions().length())}, 1, number_of_randomizations), ...
%                     'RandomComparisonfMRI_WU.all_differences', ...
%                     varargin{:});
%                 assert(iscell(rc.getAllDifferences()) && ...
%                     isequal(size(rc.getAllDifferences()), [1, number_of_randomizations]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getAllDifferences())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
% 
%                 rc.p1 = get_from_varargin( ...
%                     {zeros(atlas.getBrainRegions().length())}, ...
%                     'RandomComparisonfMRI_WU.p1', ...
%                     varargin{:});
%                 assert(iscell(rc.getP1()) && ...
%                     isequal(size(rc.getP1()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getP1())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
% 
%                 rc.p2 = get_from_varargin( ...
%                     {zeros(atlas.getBrainRegions().length())}, ...
%                     'RandomComparisonfMRI_WU.p2', ...
%                     varargin{:});
%                 assert(iscell(rc.getP2()) && ...
%                     isequal(size(rc.getP2()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getP2())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
% 
%                 rc.confidence_interval_min = get_from_varargin( ...
%                     {zeros(atlas.getBrainRegions().length())}, ...
%                     'RandomComparisonfMRI_WU.confidence_min', ...
%                     varargin{:});
%                 assert(iscell(rc.getConfidenceIntervalMin()) && ...
%                     isequal(size(rc.getConfidenceIntervalMin()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getConfidenceIntervalMin())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
% 
%                 rc.confidence_interval_max = get_from_varargin( ...
%                     {zeros(atlas.getBrainRegions().length())}, ...
%                     'RandomComparisonfMRI_WU.confidence_max', ...
%                     varargin{:});
%                 assert(iscell(rc.getConfidenceIntervalMax()) && ...
%                     isequal(size(rc.getConfidenceIntervalMax()), [1, 1]) && ...
%                     all(cellfun(@(x) isequal(size(x), [atlas.getBrainRegions().length(), atlas.getBrainRegions().length()]), rc.getConfidenceIntervalMax())), ...
%                     [BRAPH2.STR ':RandomComparisonfMRI_WU:' BRAPH2.WRONG_INPUT], ...
%                     'Data not compatible with RandomComparisonfMRI_WU')
                
            end
        end
    end
    methods (Static)  % Descriptive functions
        function measurement_class = getClass() %#ok<*INUSD>
            measurement_class = 'RandomComparisonfMRI_WU';
        end
        function name = getName()
            name = 'RandomComparison fMRI WU';
        end
        function description = getDescription()
            % comparison description missing
            description = 'fMRI random comparison with weighted graphs.';
        end
        function atlas_number = getBrainAtlasNumber()
            atlas_number =  1;
        end
        function analysis_class = getAnalysisClass()
            analysis_class = 'AnalysisfMRI_WU';
        end
        function subject_class = getSubjectClass()
            subject_class = 'SubjectfMRI';
        end
        function available_settings = getAvailableSettings()
            available_settings = {
                'RandomComparisonfMRI_WU.RandomizationNumber', BRAPH2.NUMERIC, 1000, {}; ...
                'RandomComparisonfMRI_WU.AttemptsPerEdge', BRAPH2.NUMERIC, 5, {}; ...
                'RandomComparisonfMRI_WU.NumberOfWeights', BRAPH2.NUMERIC, 1, {}; ...
                };
        end
        function sub = getRandomComparison(random_comparison_class, id, label, notes, atlas, measure_code, group, varargin)
            sub = eval([random_comparison_class '(id, label, notes, atlas, measure_code, group, varargin{:})']);
        end
    end
end